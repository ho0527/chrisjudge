-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- 主機： 127.0.0.1
-- 產生時間： 2023-11-18 12:51:58
-- 伺服器版本： 10.4.27-MariaDB
-- PHP 版本： 8.2.4

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- 資料庫： `chrisjudge`
--

-- --------------------------------------------------------

--
-- 資料表結構 `log`
--

CREATE TABLE `log` (
  `id` int(11) NOT NULL,
  `userid` text NOT NULL,
  `move` text NOT NULL,
  `movetime` text NOT NULL,
  `ps` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

--
-- 傾印資料表的資料 `log`
--


-- --------------------------------------------------------

--
-- 資料表結構 `question`
--

CREATE TABLE `question` (
  `id` int(11) NOT NULL,
  `userid` text NOT NULL,
  `title` text NOT NULL,
  `description` text NOT NULL,
  `tag` text NOT NULL,
  `input` longtext NOT NULL,
  `output` longtext NOT NULL,
  `maxruntime` text NOT NULL,
  `createtime` text NOT NULL,
  `updatetime` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

--
-- 傾印資料表的資料 `question`
--

INSERT INTO `question` (`id`, `userid`, `title`, `description`, `tag`, `input`, `output`, `maxruntime`, `createtime`, `updatetime`) VALUES
(1, '1', 'Luhn演算法', 'Luhn 演算法（Luhn algorithm），是一種簡單的校驗和演算法，一般用於驗證身份識別碼，例如發卡行識別碼、國際行動裝置辨識碼（IMEI），美國國家提供商標識號碼，或是加拿大社會保險號碼。你現在要判斷輸入的數字是否可以通過檢核。 \n\nLuhn 演算法會通過校驗碼對一串數字進行驗證，校驗碼會被加到這串數字的末尾處，從而得到一個完整的身份識別碼。 \n以數字「79927398713」為例，為計算其校驗位是否正確，我們先取前 N-1 個數字，也就是 \n「7992739871」進行計算： \n1. 從從右往左，奇數位乘 2（例如，1*2=2），然後將兩位數字的個位與十位相加（例如，16：1+6=7，18：1+8=9） \n2. 把得到的數字加在一起（本例中得到 67） \n3. 將該數字乘以 9 （603） \n4. 取其個位數字（3），得到校驗位 \n5. 將計算出來的校驗位與輸入的校驗位進行比較判斷是否一致\n\n測試資料第一行會有一個正整數 n，接下來有 n 行文字，每行有一組要檢查的數字，每行會有任意長度的文字，只有數字或空格才是正常的輸入內容，若包含不合法的字元，或是無法通過 Luhn 的檢查，請輸出 N，若通過檢查，則輸出 Y。 ', '技能競賽', '3\n79927398713\n79927398714\n1234567831|&|4\n4291 1966 1372 1345\n1966\n1372\n123AB0', 'Y\nN\nN|&|Y\nY\nN\nN', '10', '2023-10-22 20:43:21', '2023-10-22 21:24:15'),
(2, '1', '陣列運算', '梅普是服裝公司設計部門的 PM，她在睡前才想起明天要在部門會議上報告新上市衣服的材 \n料，你是否可以幫她產生出明天要報告的方案呢？\n \n梅普會提供給你不同的面向的原料，以及不同原料所需的價格，請你幫她產生出不同的方案，讓她度過明天的難關。 \n\n測試資料第一行會有一個正整數 m，1<=m<=10，接下來有 m 行文字，每行代表不同的面向，接著下行會有一個正整數 n，1<=n<=10，代表接下來有 n 行，每行會有三組文字 t1 t2 t3， t1 代表面向，t2 代表原料的名稱，t3 代表 t2 的價錢，請你協助梅普在每個面向挑選一個原料，列舉出所有的可能和總花費，並依照所需總花費升冪排序，若總花費相同，則依原料輸入先後排序。\n\n輸出的結果中，先輸出總花費，空格後再輸出該方案各面向所選用的原料，原料間使用空格隔開。 ', '技能競賽', '2\nfiber button\n4\nfiber synthetic 10\nfiber natural 15\nbutton leather 11\nbutton plastics 5|&|3\ncolor type gender\n7\ncolor black 2\ncolor green 2\ncolor golden 5\ntype t-shirt 100\ntype pants 150\ngender male 10\ngender female 10', '15 synthetic plastics\n20 natural plastics\n21 synthetic leather\n26 natural leather|&|112 black t-shirt male\n112 black t-shirt female\n112 green t-shirt male\n112 green t-shirt female\n115 golden t-shirt male\n115 golden t-shirt female \n162 black pants male\n162 black pants female\n162 green pants male\n162 green pants female\n165 golden pants male\n165 golden pants female', '10', '2023-10-22 21:33:06', '2023-10-24 18:05:50'),
(3, '1', '路徑製作', '輸入一個大小為 8*8 的二維陣列，其中”1”代表不通的路，”0”代表可通的路，此迷宮包含至少一條\n能夠從入口到出口的路徑。將一老鼠放入迷宮入口處(0,0)(左上角)，令其尋找出口(7,7)(右下角)，表\n示方式為(row,column)，你的程式必須計算並輸出老鼠走過的座標，每行一個座標。 \n移動規則如下: \n1. 一次只能走一格，共有 8 個移動方向，分別為上、右上、右、右下、下、左下、左、左上。\n2. 移動的方向必須依照以下順序: 上、右上、右、右下、下、左下、左、左上 \n3. 若嘗試的路徑為死路，必須返回尋找其他路徑 \n4. 走過的路不可走', '技能競賽', '0 1 1 1 0 1 1 0\n0 0 0 1 0 0 0 1\n0 1 0 1 1 0 1 1\n1 1 0 0 0 0 1 0\n1 0 0 1 1 0 1 0\n1 1 0 0 1 0 1 1\n1 1 1 1 1 0 1 0\n0 0 1 1 1 1 0 0', '(0,0)\n(1,1)\n(1,2)\n(2,2)\n(3,3)\n(3,4)\n(2,5)\n(1,5)\n(1,6)\n(0,7)\n(1,4)\n(0,4)\n(3,5)\n(4,5)\n(5,5)\n(6,5)\n(7,6)\n(6,7)\n(7,7)', '10', '2023-10-24 18:04:50', '2023-10-24 18:04:50'),
(4, '1', '括號判別', '給定一個只包含\'(\'、\')\'和\'*\'三種類型字元的字串，寫一個程式來檢查這個字符串是否有效。一個合法的字串必須符合以下規則: \n1. 任何左括號\'(\'必須有一個相應的右括號\')\'。\n2. 任何右括號\')\'必須有一個相應的左括號\'(\'。\n3. 左小括號\'(\'必須放在相應的右小括號\')\'之前。\n4. \'*\'可以被視為單個右括號\')\'或單個左括號\'(\'或空白。\n5. 空白也是有效的。\n\n輸入的第一行有一個正整數 n，接下來有 n 行文字，每行為一個要驗證的字串，字串長範圍為 \n[1, 100]，對於合法的字串，請輸出 Y，否則請輸出 N ', '技能競賽', '5\n()\n(*)\n((*)\n((*)*\n())*|&|4\n()\n()*\n((()***\n()))*|&|7\n((((())))))))\n(())***)\n()((*)\n(((***)))*\n((()))))*\n*****)\n(((**|&|2\n***\n(((*)', 'Y\nY \nY\nY\nN|&|Y\nY\nY\nN|&|N\nY\nY\nY\nN\nY\nN|&|Y\nN', '10', '2023-11-04 23:10:54', '2023-11-04 23:15:17'),
(5, '1', '矩陣相乘', '一連串矩陣相乘，無論從何處開始相乘，計算結果都一樣，然而計算時間卻有差異。假設今天有三個矩陣 A、B 與 C，大小分別為(i, j), (j, k), (k, l)，在相乘時，我們可以選擇先將 AB 相乘，其結果再與 C 相乘，乘法運算量為: i*j*k + i*k*l，或是 BC 先相乘，A 再與其結果相乘，運算量為: j*k*l + i*j*l，在這題你必須計算給定指定數量的矩陣，其相乘最小所需的時間為多少。\n\n輸入第一行有一個整數 n，表示共有 n 個矩陣，1 <= n <= 20，接下來 n 行，依序為第 1 至第 n 個矩陣大小，每行有兩個數字 c r，分別代表該矩陣的 column 與 row，最後請輸出該組矩陣相乘最少的乘法次數。', '技能競賽', '3\n5 10\n10 20\n20 35|&|2\n10 20\n20 35|&|6\n30 35\n35 15\n15 5\n5 10\n10 20\n20 25', '4500|&|7000|&|15125', '10', '2023-11-04 23:17:05', '2023-11-04 23:17:05'),
(6, '1', '最大公因數', '計算最大公因數 \n給定一串數字，計算其最大公因數 (greatest common divisor)。\n測試資料第一行會有一個正整數 n，接下來有 n 行文字，每行有一個數字 i， 1 <= i <= 231-1，請輸出 n 個數字之間的最大公因數。', '技能競賽', '3\n50\n75\n100|&|4\n29\n11\n19\n50', '25|&|1', '10', '2023-11-04 23:18:06', '2023-11-04 23:18:06'),
(7, '1', '眾數', '給定一串數字，找出這串數字的眾數。眾數為一組資料中出現次數最多的數值。眾數可能是一個\n數，但也可能是多個數。若資料的數值出現次數相同且無其他數值時，則不存在眾數。\n\n測試資料第一行會有一個正整數 n，接下來有 n 行文字，每行有一個數字 i， 1 <= i <= 231-1，請輸出 n 個數字之間的眾數，當有多組時，請由數值小到大每行輸出一個，若不存在，則輸出-1。', '技能競賽', '3\n50\n75\n100|&|5\n5\n5 \n2\n8\n2', '-1|&|2\n5', '10', '2023-11-04 23:18:26', '2023-11-04 23:19:12'),
(8, '1', '判斷完美數', '當一個數字的所有的真因子（即除了自身以外的因數）的和剛好為本身時，即為完美數，請判斷\n輸入的數字是否為完美數。\n\n測試資料第一行會有一個正整數 n，接下來有 n 行文字，每行有一個數字 i， 1 <= i <= 2^63-1，若 i 為完美數則輸出 Y，否則輸出 N。', '技能競賽', '3\n4\n28\n100', 'N\nY\nN', '10', '2023-11-04 23:20:16', '2023-11-04 23:20:16'),
(9, '1', '匯率換算', '給定銀行的牌告匯率，進行各種貨幣與新台幣的轉換。\n測試資料第一行會有一個正整數 m，接下來有 m 行文字，每行有一個數字 o a b c d，o 為三位數英文貨幣代碼，a、b、c、d 精準到小數點第五位，其中 a 與 b 為 現金匯率，c 與 d 為即期匯率，a 與 c 為買入匯率，b 與 d 為賣出匯率。 \n接下來有一個數字 n，表示接下來有 n 個客戶，每行有四個部分 w x y z。\n w 為交易方式，A 代表使用銀行帳戶交易，C 代表使用現金交易。\n x 為兌換前貨幣別\n y 為兌換後貨幣別\n z 為兌換數量，z >= 0 x、y 至少一個為 TWD。\n\n對於每個客戶，請輸出其交易後的貨幣數量，精準到小數點第五位，無條件捨去，不足五位補0。', '技能競賽', '2\nTWD 1 1 1 1\nUSD 27 28 27.5 27.711\n2\nC USD TWD 100\nA TWD USD 2700|&|2\nTWD 1 1 1 1\nMYR 5.5 7.25 0 0\n2\nC MYR TWD 10\nC TWD MYR 55', '2700.00000\n97.43423|&|55.00000\n7.58620', '10', '2023-11-05 10:52:32', '2023-11-05 10:52:32'),
(10, '1', '密碼檢查', '密碼規則檢查\n強密碼可以降低密碼被猜中的機率，假設密碼可以由不同類型的字元組成:\n- 數字 0123456789\n- 大寫英文 ABCDEFGHIJKLMNOPQRSTUVWXYZ \n- 小寫英文 abcdefghijklmnopqrstuvwxyz \n- 特殊符號 ~!@#$%^&*()_+=-\\|\';\":/.,?>< \n\n請依照以下規則判斷密碼強度: \n- 四種類型的組合都有: 4 \n- 四種組合中只有三個: 3 \n- 四種組合中只有兩個: 2 \n- 四種組合中只有一個: 1 \n\n測試資料第一行會有一個正整數 n，接下來有 n 行文字，每行有一串文字 s，每行請輸出該密碼的強度。', '技能競賽', '4\n45Af\nQwe!@#123\n100\nQaQ|&|7\n123dfs56443\nhfr#Afdvdjikosadi\nhujiofrew874874945163334###\ngnhiufiaus@!DSC\nbasduh@#!RR#@SD\nFSDASDF@R$$#%848\nsajiuof@#RTGFV1531|&|1\nefwnijhiuwhuhfuhiuhewbhwsaiukfasdguiui327187432698hnfcaiksubhui4984646iugdsaiADSSDF%', '3\n4\n1\n2|&|2\n3\n3\n3\n3\n3\n4|&|4', '10', '2023-11-05 10:55:40', '2023-11-05 10:55:40'),
(11, '1', '數字排序', '提供給你一組數字的順序，試著排列他們，找到下一個大的數值。若沒有的話，則回傳最小的數值。\n\n測試資料第一行會有一個正整數 m，1<=m<=10，代表接下來有 m 組資料。每組資料有兩行，第一行有一個正整數 n，1<=n<=100，代表接下來有 n 個數字，下一行會有 n 個數字 num[i]，1 <= i<= n，0 <= num[i] <= 9，數字之間用空白分隔。\n\n每組資料輸出一行結果，每行輸出一個數值。', '技能競賽', '2\n3\n2 1 3\n3\n3 2 1|&|2\n4\n1 5 1 1\n1\n9', '231\n123|&|5111\n9', '10', '2023-11-05 10:57:09', '2023-11-05 10:57:09'),
(12, '1', 'hash table演算法', 'Hash table 在撰寫一些邏輯時時常使用，但遇到非數字的 key 時需要做一些轉換才可以用成數 值表達出他的 hash value，在這裡你需要依以下規則實作字串的 hash function。 \n\n這個 hash function 已經於其他語言實做出來了，由於該語言使用二進位儲存數值，因此有數值表達範圍的限制 (-231 ~ 231-1)，在你的實作中，也必須模擬出這個行為，以讓計算出來的 hash value 可以於不同語言中使用。 \n\n給定一字串 str，長度為 n，str[i] 表示該字串中第 i 個字元的 ASCII code，hash value 的計算方式為:\nstr[0]*31(n-1) + str[1]*31(n-2) + ... + str[n-1]*31(0) \n\n輸入的第一行有一個正整數 n，接下來有 n 行文字，每行不超過 65536 個字元，請輸出該字串的 hash value。', '技能競賽', '5\na\nabcd \nabcde\nabcdef\nabcdefg|&|1 \nAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', '97\n2987074\n92599395\n-1424385949\n-1206291356|&|-323643840', '10', '2023-11-05 10:59:48', '2023-11-05 10:59:48'),
(13, '1', '計算最佳的股票利益', '給定一個整數序列 p[i]，長度為 n，裡面包含第 i 天的股價，由於資金有限，買入後必須要賣出，才可以進行下一次買賣，也不可以賣出沒有擁有的股票。請計算出經過最多 m 次的買與賣後，可以獲得最多的利益為多少。  \n\n輸入的第一行有兩個正整數 m n，m 代表最多可以買與賣幾次，n 代表下一行有 n 個數字，每個數字代表第 i 天的股價，請你輸出最多進行 m 次買賣後，可以獲得的最高利益。', '技能競賽', '2 4\n9 4 8 7|&|2 4\n9 4 8 9|&|1 4\n9 4 8 9', '4|&|5|&|5', '10', '2023-11-05 11:00:54', '2023-11-05 11:00:54'),
(15, '1', '最大最小值相加', '給定一串數字，將最大值和最小值相加。 \n\n測試資料第一行會有一個正整數 n，接下來有 n 行數列，請輸出 a 每個數列中最大和最小值相加的合。', '技能競賽', '3\n10 20 30 2 100\n9 7 3 7 1 2 22\n10 11 12 13 14|&|1\n100 200 300 400 500', '102\n2\n24|&|600', '10', '2023-11-05 11:01:49', '2023-11-05 11:01:49'),
(16, '1', '質數判斷', '給定一串數字，判斷是否為質數。\n\n測試資料第一行會有一個正整數 n，接下來有 n 行文字，每行有一個數字 i， 1 <= i <= 231-1，如果為質數輸出 Y 不是時輸出 N。', '技能競賽', '5\n10\n17\n3\n100\n101|&|2\n91\n5', 'N\nY\nY\nN\nY|&|N\nY', '10', '2023-11-05 11:02:37', '2023-11-05 11:02:37'),
(17, '1', '凱薩密碼', '把明碼的每個字元加上某一個整數 K 而得到密碼的字元（明碼及密碼字元一定都在 ASCII 碼中可列印的範圍內）。例如若 K=2，那麼 apple 經過加密後就變成 crrng 了。解密則是反過來做。這個問題是給你一個密碼字串，請你依照上述的解密方式輸出明碼。 \n\n輸入的第一行為 K，第二行為要解密的內容', '技能競賽', '3\nzheghvljq|&|2\ncrrng', 'webdesign|&|apple', '10', '2023-11-05 11:03:38', '2023-11-05 11:03:38'),
(18, '1', '身分證驗證', '身分證字號有底下這樣的規則，因此對於任意輸入的身分證字號可以有一些基本的判斷原則，請您來判斷一個身分證字號是否是正常的號碼。 \n\n1. 英文代號以下表轉換成數字 \nA=10 台北市 J=18 新竹縣 S=26 高雄縣 \nB=11 台中市 K=19 苗栗縣 T=27 屏東縣 \nC=12 基隆市 L=20 台中縣 U=28 花蓮縣 \nD=13 台南市 M=21 南投縣 V=29 台東縣 \nE=14 高雄市 N=22 彰化縣 W=32 金門縣 \nF=15 台北縣 O=35 新竹市 X=30 澎湖縣 \nG=16 宜蘭縣 P=23 雲林縣 Y=31 陽明山 \nH=17 桃園縣 Q=24 嘉義縣 Z=33 連江縣 \nI=34 嘉義市 R=25 台南縣 \n\n2. 英文轉成的數字, 個位數乘９再加上十位數的數字\n3. 各數字從右到左依次乘１、２、３、４．．．．８\n4. 求出(2),(3) 及最後一碼的和\n5. (4)除 10 若整除，則為正確例：\nT112663836 \n2 + 7*9 + 1*8 + 1*7 + 2*6 + 6*5 + 6*4 + 3*3 + 8*2 + 3*1 + 6 = 180 \n除以 10 整除，因此為正確\n\n正確時輸出 Y，錯誤時輸出 N', '技能競賽', 'T112663836|&|A112663836|&|A123456789|&|A1234567890|&|AB12345678|&|F132399658', 'Y|&|N|&|Y|&|N|&|N|&|Y', '10', '2023-11-05 11:05:48', '2023-11-05 11:06:06'),
(19, '1', '矩陣相加', '輸入兩個整數矩陣，將相同位置的數字相加輸出成新的矩陣，當其中一個矩陣長度不夠時自動補 0。', '技能競賽', '1 2 3 4 5 6\n10 10 10|&|5 5\n1 2 3 4', '11 12 13 4 5 6|&|6 7 3 4', '10', '2023-11-05 11:06:51', '2023-11-05 11:06:51'),
(20, '1', '文章查詢', '給定一個英文文章，寫一個程式來找出出現前 3 多次的單字，當出現次數相同時以字母排序，忽略大小寫，文章中不會有換行，但會有句號、逗號的標點符號。', '技能競賽', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc nunc leo, suscipit ut bibendum rhoncus, volutpat quis ex. Maecenas ullamcorper, purus ut elementum elementum, erat enim aliquam \nnisi, at scelerisque mi dolor a libero. Nunc cursus elementum cursus. \nMaecenas finibus. ', 'elementum\nnunc\ncursus', '10', '2023-11-05 11:08:07', '2023-11-05 11:08:07'),
(21, '1', '圈圈叉叉', '提供目前圈圈叉叉遊戲局面的結果，判斷誰輸誰贏。兩個玩家分別用 O 與 X 代表，當任一玩家佔滿一橫、一豎或是對角時，該玩家勝利。 \n\n測試資料第一行會有一個正整數 n，代表局面大小，局面一定為方形。接下來共有 n 行，每行共有 n 個字元，O (大寫)、X (大寫)代表玩家，- 代表空格。請輸出勝利的玩家，當無法判斷輸贏， 或是平手時，則輸出?。', '技能競賽', '3\nOXO\nXOX\nXOO|&|3\nXXO\nOOX\nXOO', 'O|&|?', '3', '2023-11-07 21:15:46', '2023-11-07 21:22:58'),
(22, '1', '計算費波那契數', '費波那契數定義如下:\n𝐹0 = 0 \n𝐹1 = 1 \n𝐹𝑛 = 𝐹𝑛−1 + 𝐹𝑛−2 (𝑁 ≥ 2)', '技能競賽', '5|&|10', '5|&|55', '3', '2023-11-07 21:16:47', '2023-11-07 21:19:44'),
(23, '1', '質因數分解', '將一個正整數表示成質因數乘積的過程和得到的表示結果叫做質因數分解。顯示質因數分解結果時，如果其中某個質因數出現了多次，則需用冪次的形式表示。例如 12 的質因數分解是：\n12 = 2^2*3 \n\n測試資料第一行會有一個正整數 n，接下來有 n 行整數，每行有一個數字 i，2 <= i <= 2^31- 1，輸出 i 的質因數分解結果，所有質因數由小至大列出。乘積式中間無空格。', '技能競賽', '3\n50\n57\n111|&|5\n32820\n288\n23244\n4506106\n131071', '2*5^2\n3*19\n3*37|&|2^2*3*5*547\n2^5*3^2\n2^2*3*13*149\n2*11*239*857\n131071', '5', '2023-11-07 21:22:46', '2023-11-07 21:22:46'),
(24, '1', '相似度比對', '在機器學習中，經常需要知道資料間差異的大小，進而評價相似性和類別。通常會先將資料轉換為向量，再透過距離的演算法，計算其差異。\n \n測試資料第一行有兩個數字 N L，代表向量的數量與向量的長度。第二行共有 L 個使用空白分隔的整數，為向量 V0 的資料。接著有一個正整數 A，代表要使用的距離演算法。以下為使用的演算法:\n\n1: 歐幾里得距離 \nd(x,y)=√((x1-y1)^2+(x2-y2)^2...(xn-yn)^2)\n\nx, y 分別為兩個向量 \n\n \n2: 漢明距離 \n比對兩個向量在相同的位置數值不同的個數。如: \n「1 2 3」與「1 5 3」的距離為 1 \n「2 1 4 3 8 9 6」與「2 2 3 3 7 9 6」的距離為 3 \n\n接下來共有 N 個向量，每行代表 向量 Vi (1<=i<=N)，每行有 L 個數字。 \n請使用 A 的距離演算法，計算與 V0 最接近的向量 Vi，並輸出 Vi 的值。若有多個向量有相同距離，則依照輸入順序輸出第一個向量。', '技能競賽', '3 2\n5 5\n1\n0 0\n5 4\n-50 1|&|4 5\n115 104 97 114 101\n2\n116 111 110 101 100\n114 111 115 101 115\n97 112 112 108 101\n84 104 101 109 69', '5 4|&|97 112 112 108 101', '10', '2023-11-07 21:26:46', '2023-11-07 21:26:46'),
(25, '1', '找零錢v1', '假設目前共有以下種類的硬幣:\n1 元\n5 元\n10 元\n50 元\n\n當要找指定金額時，分別不同種類的硬幣要給多少個，總硬幣數量會最少?\n輸入共有一個正整數 S ，為要找的零錢，請依硬幣額度由小到大，輸出硬幣額度與要找的枚數。若不須該硬幣時，則輸出 0。最後請輸出其總硬幣數量。\n', '技能競賽', '213|&|189', '1 3\n5 0\n10 1\n50 4\n8|&|1 4\n5 1\n10 3\n50 3\n11', '10', '2023-11-07 21:29:41', '2023-11-07 21:29:41'),
(26, '1', '中綴轉後綴計算機', '給定一個使用中綴表達式呈現的四則運算式，依照以下規則:\n1.括弧內優先計算\n2.先乘除，後加減\n3.由左而右計算\n\n請先將其轉換為程式語言方便計算的後綴表達式，最後輸出其計算結果\n\n在後綴表達式中，運算子置於運算元的後面。例如表達「3 + 4」時，寫作「3 4 + 」。如果有多個運算子，運算子置於第二個運算元的後面，如「3 - 4 + 5」在後綴表達式寫作「3 4 - 5 + 」：先 3 減去 4，再加上 5。其中一個好處是不需要使用括號。例如中綴表達式中「3 - 4 * 5」與「（3 - 4）\n*5」不相同，但後綴表達式中前者寫做「3 4 5 * - 」，後者寫做「3 4 - 5 * 」。\n測試資料第一行會有一個使用中綴表達式呈現的運算式，中間使用空格分離運算子與運算元， 請分別輸出其後綴表達式的轉換結果，與計算結果\n', '技能競賽', '3 + 4|&|2 + ( 3 - 4 ) * 50', '3 4 +\n7|&|2 3 4 - 50 * +\n-48', '10', '2023-11-07 21:30:45', '2023-11-07 21:30:45'),
(27, '1', '單字梯', '給定一個起始單字、一個終止單字與單字表，請從單字表中選出單字，輸出一個單字鏈，其相鄰的單字只能差異一個字母。\n\n單字的長度為 1 ~ 10，單字表中的每個單字字母數量與起始單字相同，單字表數量不超過 5000。輸入第一行有兩個單字，分別為起始單字與終止單字，接下來有一個正整數 N，接下來有 N 個單字，代表單字表。請找出最短的轉換順序，輸出其長度。若字母表中的單字無法轉換為終止單字， 請輸出 0。\n\n舉例來說，若要從 hit 轉換到 cog，在字母表有 [\'hot\', \'dot\', \'dog\', \'lot\', \'log\', \'cog\'] 時，轉換的順序為: \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\"，在其長度為 5。\n', '技能競賽', 'hit cog\n6\nhot\ndot\ndog\nlot\nlog\ncog|&|hit cog\n5\nhot\ndot\ndog\nlot\nlog', '5|&|0', '10', '2023-11-07 21:32:01', '2023-11-07 21:32:01'),
(28, '1', '五子棋', '提供目前五子棋盤面的結果，判斷誰輸誰贏。兩個玩家分別用 W 與 B 代表白黑與黑棋，當任一玩家五個黑子連成一橫、一豎或是對角時，該玩家勝利。\n測試資料共有 15 行，每行共有 15 個字元，W 代表白棋，B 代表黑棋，- 代表空格。請輸出勝利的玩家棋子 (W 或 B)，當無法判斷輸贏，或是平手時，則輸出?。\n', '技能競賽', '---------------\n---------------\n---------------\n---------------\n---------------\n----------B----\n--------B------\n------BBB------\n-------W-------\n-------W-------\n-------W-------\n-------W-------\n-------W-------\n---------------\n---------------\n---------------|&|---------------\n---------------\n---------------\n---------------\n---------------\n---------------\n--------BW----W\n-----B---WB--W-\n--------BBWBWB-\n-----B---W-WW--\n----------WBBW-\n---------B--W--\n------------W--\n---------------\n---------------', 'W|&|W', '3', '2023-11-07 21:35:59', '2023-11-07 21:35:59'),
(29, '1', '梯子計算', '假如有 n 階樓梯，每次只能向上走 1 階、2 階或 3 階，請問一共有多少種不同的走法呢？\n測試資料第一行會有一個正整數 n (n <= 50)，請輸出走法的總數量。', '技能競賽', '1|&|2|&|3', '1|&|2|&|4', '10', '2023-11-07 21:36:44', '2023-11-07 21:36:44'),
(30, '1', '字串相似度比對', '在自然語言處理中，我們有時候會計算至少需要多少次的處理，才能將一個字串變成另一個字串，來判斷字串的相似度。舉例來說常見的拼寫檢查，我們可以將一個拼錯的單字，和其他在字典內正確的字進行比較，來找出可能的單字。\n\n假設目前可以進行的處理有三個: 刪除、加入、編輯任意字元。你現在需要實作出一個演算法， 計算兩個字串，至少需要經過幾次處理，才能變為另一個字串，進而計算出其相似度。\n\n測試資料共有兩行，每行只會有小寫的英文字母，第一行為字串 a，第二行為字串 b，請輸出a至少需要幾次的處理，才能變為字串 b。\n', '技能競賽', 'kitten\nsitting|&|setting\nsitting', '3|&|1', '10', '2023-11-07 21:37:33', '2023-11-07 21:37:33'),
(31, '1', '找零錢v2', '假設目前共有多種類的硬幣，當要找指定金額時，最少需要幾個硬幣?\n\n輸入共有一個正整數 S，為要找的零錢。接下來有一個正整數 N，代表硬幣的種類數量。下一行共有 N 個正整數，代表硬幣的面額。請輸出其總硬幣數量。\n\n如:\n213 = 1*3 + 5*0 + 10*1 + 50+4，共 8 枚硬幣\n189 = 1*0 + 3*0 + 7*1 + 13*14，共 15 枚硬幣\n', '技能競賽', '213\n4\n1 5 10 50|&|189\n4\n1 3 7 13', '8|&|15', '10', '2023-11-07 21:38:10', '2023-11-07 21:38:10'),
(32, '1', '中綴轉前綴計算機', '給定一個使用中綴表達式呈現的四則運算式，依照以下規則:\n1.括弧內優先計算\n2.先指數運算，再乘除，最後加減\n3.由左而右計算\n\n請先將其轉換為前綴表達式，最後輸出其計算結果\n\n在前綴表達式中，運算子置於運算元的前面。例如表達「3 + 4」時，寫作「+ 3 4」。如果有多個運算子，運算子置於第二個運算元的前面，如「3 - 4 + 5」在前綴表達式寫作「+ - 3 4 5」：先 3 減去 4，再加上 5。\n測試資料第一行會有一個使用中綴表達式呈現的運算式，中間使用空格分離運算子與運算元， 運算元的範圍會在 -1000 ~ 1000 之間的整數，請分別輸出其前綴表達式的轉換結果，與計算結 果。若計算過程出現小數，計算過程中保留原始數值進行計算，最後結果若有小數，則無條件捨去到小數點後 3 位。\n', '技能競賽', '1 + ( ( 2 + 3 ) * 4 ) - 5|&|1 - 2 ^ 3|&|1 / 3', '- + 1 * + 2 3 4 5\n16|&|- 1 ^ 2 3\n-7|&|/ 1 3\n0.333', '10', '2023-11-07 21:39:14', '2023-11-07 21:39:14');

-- --------------------------------------------------------

--
-- 資料表結構 `response`
--

CREATE TABLE `response` (
  `id` int(11) NOT NULL,
  `userid` int(11) NOT NULL,
  `questionid` int(11) NOT NULL,
  `fileurl` text NOT NULL,
  `fileextension` text NOT NULL,
  `version` text NOT NULL,
  `result` text NOT NULL,
  `response` longtext NOT NULL,
  `runtime` text NOT NULL,
  `createtime` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

--
-- 傾印資料表的資料 `response`
--

INSERT INTO `response` (`id`, `userid`, `questionid`, `fileurl`, `fileextension`, `version`, `result`, `response`, `runtime`, `createtime`) VALUES
(1, 2, 1, 'C:/nginx/python/backend/chrisjudge/upload/2_1testfile_v0001.php', '.php', '1', 'SU', ' test_1 success,\n input: 3\n79927398713\n79927398714\n1234567831,\n expectedoutput: YNN,\n actualoutput: YNN,\n test_2 success,\n input: 4\n4291 1966 1372 1345\n1966\n1372\n123AB0,\n expectedoutput: YYNN,\n actualoutput: YYNN,', '0.2349989414215088', '2023-11-02 18:49:11'),
(2, 2, 1, 'C:/nginx/python/backend/chrisjudge/upload/2_1testfile_v0002.php', '.php', '2', 'SU', ' test_1 success,\n input: 3\n79927398713\n79927398714\n1234567831,\n expectedoutput: YNN,\n actualoutput: YNN,\n test_2 success,\n input: 4\n4291 1966 1372 1345\n1966\n1372\n123AB0,\n expectedoutput: YYNN,\n actualoutput: YYNN,', '0.11199784278869629', '2023-11-02 18:49:48'),
(3, 2, 5, 'C:/nginx/python/backend/chrisjudge/upload/2_5testfile_v0001.php', '.php', '1', 'RF', 'test_1 failed respound failed,\n input: 5\n()\n(*)\n((*)\n((*)*\n())*,\n expectedoutput: YY YYN,\n actualoutput: YYYYY,\ntest_2 failed respound failed,\n input: 4\n()\n()*\n((()***\n()))*,\n expectedoutput: YYYN,\n actualoutput: YYYY,\ntest_3 failed respound failed,\n input: 7\n((((())))))))\n(())***)\n()((*)\n(((***)))*\n((()))))*\n*****)\n(((**,\n expectedoutput: NYYYNYN,\n actualoutput: YYYYYYN,\ntest_4 success,\n input: 2\n***\n(((*),\n expectedoutput: YN,\n actualoutput: YN,\n', '1700308064.9152775', '2023-11-18 19:47:45');

-- --------------------------------------------------------

--
-- 資料表結構 `tag`
--

CREATE TABLE `tag` (
  `id` int(11) NOT NULL,
  `name` text NOT NULL,
  `createtime` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

-- --------------------------------------------------------

--
-- 資料表結構 `token`
--

CREATE TABLE `token` (
  `id` int(11) NOT NULL,
  `userid` text NOT NULL,
  `token` text NOT NULL,
  `createtime` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

--
-- 傾印資料表的資料 `token`
--

INSERT INTO `token` (`id`, `userid`, `token`, `createtime`) VALUES
(15, '2', '5a81e5d56ae016b99cb8e65b7ab243b28326af08c8c7ddbc0b62e994250e382f30735762', '2023-10-29 12:37:08'),
(18, '2', '5a81e5d56ae016b99cb8e65b7ab243b28326af08c8c7ddbc0b62e994250e382f55788066', '2023-11-18 19:41:57');

-- --------------------------------------------------------

--
-- 資料表結構 `user`
--

CREATE TABLE `user` (
  `id` int(11) NOT NULL,
  `username` text NOT NULL,
  `password` text NOT NULL,
  `nickname` text NOT NULL,
  `permission` text NOT NULL,
  `email` text NOT NULL,
  `createtime` text NOT NULL,
  `updatetime` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

--
-- 傾印資料表的資料 `user`
--

INSERT INTO `user` (`id`, `username`, `password`, `nickname`, `permission`, `email`, `createtime`, `updatetime`) VALUES
(1, '', '', '', '5', 'chris960527ho@gmail.com', '2023-10-29 12:35:33', '2023-10-29 12:35:33'),
(2, 'chris0527', '$2b$12$YdiWWySIbCy.35zfEnqPmOn5a5u8BS3lSnY1uFJeN79rb5tWwlAsK', 'chris0527', '1', '', '2023-10-29 12:36:56', '2023-10-29 12:36:56');

--
-- 已傾印資料表的索引
--

--
-- 資料表索引 `log`
--
ALTER TABLE `log`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `question`
--
ALTER TABLE `question`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `response`
--
ALTER TABLE `response`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `tag`
--
ALTER TABLE `tag`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `token`
--
ALTER TABLE `token`
  ADD PRIMARY KEY (`id`);

--
-- 資料表索引 `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`);

--
-- 在傾印的資料表使用自動遞增(AUTO_INCREMENT)
--

--
-- 使用資料表自動遞增(AUTO_INCREMENT) `log`
--
ALTER TABLE `log`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=595;

--
-- 使用資料表自動遞增(AUTO_INCREMENT) `question`
--
ALTER TABLE `question`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=33;

--
-- 使用資料表自動遞增(AUTO_INCREMENT) `response`
--
ALTER TABLE `response`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- 使用資料表自動遞增(AUTO_INCREMENT) `tag`
--
ALTER TABLE `tag`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用資料表自動遞增(AUTO_INCREMENT) `token`
--
ALTER TABLE `token`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=19;

--
-- 使用資料表自動遞增(AUTO_INCREMENT) `user`
--
ALTER TABLE `user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
